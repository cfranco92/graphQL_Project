type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String,
    people: [Student]
}

type Student {
    _id: ID!
    name: String!
    email: String!
}

type Query {
    "Returns all courses"
    getCourses: [Course]
    "Return a course"
    getCourse(id: ID!): Course
    "Delete a course"
    deleteCourse(id: ID!): Course
    "Returns all students"
    getStudents: [Student]
    "Return a student"
    getStudent(id: ID!): Student
    "Delete a student"
    deleteStudent(id: ID!): Student
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

input StudentInput {
    name: String!
    email: String!
}

input StudentEditInput {
    name: String
    email: String
}

type Mutation {
    "Create a course"
    createCourse(input: CourseInput!): Course
    "Edit a course"
    editCourse(_id: ID!, input: CourseEditInput!): Course
    "Delete a course"
    deleteCourse(_id: ID!): Course
    "Add person to a course"
    addPeople(courseID: ID!, personID: ID!): Course
    "Create a student"
    createStudent(input: StudentInput!): Student
    "Edit a student"
    editStudent(_id: ID!, input: StudentEditInput!): Student
    "Delete a student"
    deleteStudent(_id: ID!): Student
}